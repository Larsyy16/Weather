/******/ (() => { // webpackBootstrap
var __webpack_exports__ = {};
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
const API_KEY = 'ELtXBB8q5PBuRTOIqBWwFJ50UTJqkOd6';
const endpoint = 'http://dataservice.accuweather.com/locations/v1/cities/search';
const weather = 'http://dataservice.accuweather.com/currentconditions/v1/';

//http://dataservice.accuweather.com/currentconditions/v1/{locationKey}?apikey={API_KEY}
const form = document.querySelector('#search-form');
const input = document.querySelector('#search-input');
const content = document.querySelector('#content');
const weatherForecast = document.createElement('div');
weatherForecast.id = 'weatherForecast';
content.appendChild(weatherForecast);
form.addEventListener('submit', event => {
  event.preventDefault();
  const searchQuery = input.value.trim();
  if (!searchQuery) {
    content.innerHTML = '<p>Please enter a search query.</p>';
    return;
  }
  fetch(`${endpoint}?apikey=${API_KEY}&q=${encodeURIComponent(searchQuery)}`).then(response => response.json()).then(data => {
    if (data.length > 0) {
      // Extract the location key from the first result in the array
      const locationKey = data[0].Key;
      // console.table(data);
      content.innerHTML = `<p>Search results for "${searchQuery}":</p>`;
      const list = document.createElement('ul');
      content.appendChild(list);
      data.forEach(result => {
        const item = document.createElement('li');
        item.textContent = `${result.LocalizedName}, ${result.AdministrativeArea.ID}, ${result.Country.ID}`;
        list.appendChild(item);
      });
      fetch(`http://dataservice.accuweather.com/currentconditions/v1/${locationKey}?apikey=${API_KEY}`).then(response => response.json()).then(data => {
        // console.log(data);

        data.forEach(result => {
          const item = document.createElement('p');
          item.textContent = `${result.LocalObservationDateTime}, ${result.Temperature.Imperial.Value}`;
          console.log(result.LocalObservationDateTime);
          weatherForecast.style.border = '1px solid black';
          weatherForecast.appendChild(item);
        });
      }).catch(error => console.error(error));
    } else {
      resultsContainer.innerHTML = `<p>No results found for "${searchQuery}".</p>`;
    }
  }).catch(error => console.error(error));
});
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LENBQUNvQixJQUFJLENBQUM7UUFDbkMsQ0FBQyxDQUFDO01BQ0osQ0FBQyxDQUFDLENBQ0RjLEtBQUssQ0FBQ0MsS0FBSyxJQUFJTCxPQUFPLENBQUNLLEtBQUssQ0FBQ0EsS0FBSyxDQUFDLENBQUM7SUFDdkMsQ0FBQyxNQUFLO01BQ0pDLGdCQUFnQixDQUFDN0IsU0FBUyxHQUFJLDRCQUEyQkgsV0FBWSxRQUFPO0lBQzlFO0VBQUMsQ0FBQyxDQUFDLENBQ0E4QixLQUFLLENBQUNDLEtBQUssSUFBSUwsT0FBTyxDQUFDSyxLQUFLLENBQUNBLEtBQUssQ0FBQyxDQUFDO0FBR3ZDLENBQUMsQ0FBQyxDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2VhdGhlci8uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBBUElfS0VZID0gJ0VMdFhCQjhxNVBCdVJUT0lxQld3Rko1MFVUSnFrT2Q2JztcbmNvbnN0IGVuZHBvaW50ID0gJ2h0dHA6Ly9kYXRhc2VydmljZS5hY2N1d2VhdGhlci5jb20vbG9jYXRpb25zL3YxL2NpdGllcy9zZWFyY2gnO1xuY29uc3Qgd2VhdGhlciA9ICdodHRwOi8vZGF0YXNlcnZpY2UuYWNjdXdlYXRoZXIuY29tL2N1cnJlbnRjb25kaXRpb25zL3YxLydcblxuLy9odHRwOi8vZGF0YXNlcnZpY2UuYWNjdXdlYXRoZXIuY29tL2N1cnJlbnRjb25kaXRpb25zL3YxL3tsb2NhdGlvbktleX0/YXBpa2V5PXtBUElfS0VZfVxuY29uc3QgZm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNzZWFyY2gtZm9ybScpO1xuY29uc3QgaW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjc2VhcmNoLWlucHV0Jyk7XG5jb25zdCBjb250ZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2NvbnRlbnQnKTtcbmNvbnN0IHdlYXRoZXJGb3JlY2FzdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xud2VhdGhlckZvcmVjYXN0LmlkID0gJ3dlYXRoZXJGb3JlY2FzdCc7XG5jb250ZW50LmFwcGVuZENoaWxkKHdlYXRoZXJGb3JlY2FzdCk7XG5cblxuXG5mb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIChldmVudCkgPT4ge1xuICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICBcbiAgY29uc3Qgc2VhcmNoUXVlcnkgPSBpbnB1dC52YWx1ZS50cmltKCk7XG4gIFxuICBpZiAoIXNlYXJjaFF1ZXJ5KSB7XG4gICAgY29udGVudC5pbm5lckhUTUwgPSAnPHA+UGxlYXNlIGVudGVyIGEgc2VhcmNoIHF1ZXJ5LjwvcD4nO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGZldGNoKGAke2VuZHBvaW50fT9hcGlrZXk9JHtBUElfS0VZfSZxPSR7ZW5jb2RlVVJJQ29tcG9uZW50KHNlYXJjaFF1ZXJ5KX1gKVxuICAudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS5qc29uKCkpXG4gIC50aGVuKGRhdGEgPT4ge1xuICAgIGlmIChkYXRhLmxlbmd0aCA+IDApIHtcbiAgICAgIC8vIEV4dHJhY3QgdGhlIGxvY2F0aW9uIGtleSBmcm9tIHRoZSBmaXJzdCByZXN1bHQgaW4gdGhlIGFycmF5XG4gICAgICBjb25zdCBsb2NhdGlvbktleSA9IGRhdGFbMF0uS2V5O1xuICAgICAgLy8gY29uc29sZS50YWJsZShkYXRhKTtcbiAgICAgIGNvbnRlbnQuaW5uZXJIVE1MID0gYDxwPlNlYXJjaCByZXN1bHRzIGZvciBcIiR7c2VhcmNoUXVlcnl9XCI6PC9wPmA7XG4gICAgICBjb25zdCBsaXN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndWwnKTtcbiAgICAgIGNvbnRlbnQuYXBwZW5kQ2hpbGQobGlzdCk7XG4gICAgICBkYXRhLmZvckVhY2gocmVzdWx0ID0+IHtcbiAgICAgICAgY29uc3QgaXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7XG4gICAgICAgIGl0ZW0udGV4dENvbnRlbnQgPSBgJHtyZXN1bHQuTG9jYWxpemVkTmFtZX0sICR7cmVzdWx0LkFkbWluaXN0cmF0aXZlQXJlYS5JRH0sICR7cmVzdWx0LkNvdW50cnkuSUR9YDtcbiAgICAgICAgbGlzdC5hcHBlbmRDaGlsZChpdGVtKTtcbiAgICAgIH0pO1xuXG4gICAgICBmZXRjaChgaHR0cDovL2RhdGFzZXJ2aWNlLmFjY3V3ZWF0aGVyLmNvbS9jdXJyZW50Y29uZGl0aW9ucy92MS8ke2xvY2F0aW9uS2V5fT9hcGlrZXk9JHtBUElfS0VZfWApXG4gICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuanNvbigpKVxuICAgIC50aGVuKGRhdGEgPT4ge1xuICAgICAgLy8gY29uc29sZS5sb2coZGF0YSk7XG5cbiAgICBkYXRhLmZvckVhY2gocmVzdWx0ID0+IHtcbiAgICAgIGNvbnN0IGl0ZW0gPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbiAgICAgIGl0ZW0udGV4dENvbnRlbnQgPSBgJHtyZXN1bHQuTG9jYWxPYnNlcnZhdGlvbkRhdGVUaW1lfSwgJHtyZXN1bHQuVGVtcGVyYXR1cmUuSW1wZXJpYWwuVmFsdWV9YDtcbiAgICAgIGNvbnNvbGUubG9nKHJlc3VsdC5Mb2NhbE9ic2VydmF0aW9uRGF0ZVRpbWUpO1xuICAgICAgd2VhdGhlckZvcmVjYXN0LnN0eWxlLmJvcmRlciA9ICcxcHggc29saWQgYmxhY2snO1xuICAgICAgd2VhdGhlckZvcmVjYXN0LmFwcGVuZENoaWxkKGl0ZW0pO1xuICAgIH0pXG4gIH0pXG4gIC5jYXRjaChlcnJvciA9PiBjb25zb2xlLmVycm9yKGVycm9yKSk7XG59ZWxzZSB7XG4gIHJlc3VsdHNDb250YWluZXIuaW5uZXJIVE1MID0gYDxwPk5vIHJlc3VsdHMgZm91bmQgZm9yIFwiJHtzZWFyY2hRdWVyeX1cIi48L3A+YDtcbn19KVxuICAuY2F0Y2goZXJyb3IgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xuXG5cbn0pO1xuIl0sIm5hbWVzIjpbIkFQSV9LRVkiLCJlbmRwb2ludCIsIndlYXRoZXIiLCJmb3JtIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiaW5wdXQiLCJjb250ZW50Iiwid2VhdGhlckZvcmVjYXN0IiwiY3JlYXRlRWxlbWVudCIsImlkIiwiYXBwZW5kQ2hpbGQiLCJhZGRFdmVudExpc3RlbmVyIiwiZXZlbnQiLCJwcmV2ZW50RGVmYXVsdCIsInNlYXJjaFF1ZXJ5IiwidmFsdWUiLCJ0cmltIiwiaW5uZXJIVE1MIiwiZmV0Y2giLCJlbmNvZGVVUklDb21wb25lbnQiLCJ0aGVuIiwicmVzcG9uc2UiLCJqc29uIiwiZGF0YSIsImxlbmd0aCIsImxvY2F0aW9uS2V5IiwiS2V5IiwibGlzdCIsImZvckVhY2giLCJyZXN1bHQiLCJpdGVtIiwidGV4dENvbnRlbnQiLCJMb2NhbGl6ZWROYW1lIiwiQWRtaW5pc3RyYXRpdmVBcmVhIiwiSUQiLCJDb3VudHJ5IiwiTG9jYWxPYnNlcnZhdGlvbkRhdGVUaW1lIiwiVGVtcGVyYXR1cmUiLCJJbXBlcmlhbCIsIlZhbHVlIiwiY29uc29sZSIsImxvZyIsInN0eWxlIiwiYm9yZGVyIiwiY2F0Y2giLCJlcnJvciIsInJlc3VsdHNDb250YWluZXIiXSwic291cmNlUm9vdCI6IiJ9